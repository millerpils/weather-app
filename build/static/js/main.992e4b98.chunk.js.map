{"version":3,"sources":["components/DateTime.js","components/WeatherCard.js","components/Header.js","components/LocationForm.js","App.js","serviceWorker.js","index.js"],"names":["months","days","DateTime","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTheHours","date","hours","getHours","getTheDay","day","getDay","getTheMonth","month","getMonth","getTheYear","getFullYear","render","Date","state","dateInMilliseconds","dateString","react_default","a","createElement","datetime","Component","WeatherCard","classList","weatherList","weather","main","toLowerCase","className","components_DateTime","dt","temp_max","temp_min","description","getWeatherIcon","Header","status","error","cityName","countryName","LocationForm","type","name","value","query","placeholder","onChange","event","handleChange","onClick","preventDefault","getWeatherData","config","API","API_KEY","process","App","URL","fetch","then","result","json","cod","setState","weatherdata","isLoaded","message","_event$target","target","defineProperty","getWeatherCards","cards","i","cnt","push","components_WeatherCard","key","list","getlocationForm","components_LocationForm","components_Header","city","country","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.992e4b98.chunk.js","sourcesContent":["import React, { Component } from 'react'\nconst months = ['January','February','March','April','May','June','July','August','September','October','November','December']\nconst days = ['Sun','Mon','Tues','Wed','Thurs','Fri','Sat']\n\n/** props = datetime **/\n\nclass DateTime extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      months: months,\n      dateInMilliseconds: props.datetime * 1000\n    }\n  }\n\n  getTheHours = (date) => {\n    let hours = date.getHours()\n\n    if ( hours < 13) {\n      hours += ':00 am'\n    } else {\n      hours += ':00 pm'\n    }\n    return hours\n  }\n  \n  getTheDay = (date) => {\n    let day = date.getDay()\n    return days[day]\n  }\n  \n  getTheMonth = (date) => {\n    let month = date.getMonth()\n    return months[month]\n  }\n\n  getTheYear = (date) => {\n    return date.getFullYear()\n  }\n\n  render = () => {\n    let date = new Date(this.state.dateInMilliseconds)\n    let dateString = this.getTheDay(date) + ' ' + this.getTheMonth(date) + ' ' + date.getDay() + ', ' + this.getTheYear(date)\n\n    return (\n      <div>\n        <h3>{dateString}</h3>\n        {this.getTheHours(date)}\n      </div>\n    )\n  }\n}\n\nexport default DateTime","import React from 'react'\nimport DateTime from './DateTime'\n\n/** props = weatherList **/\n\nconst WeatherCard = (props) => {\n  let classList = 'weather-cards__card weather-cards__card--' + props.weatherList.weather[0].main.toLowerCase()\n\n  const getWeatherIcon = (description) => {\n    let classList\n\n    switch(description) {\n      case \"rain\":\n        classList = \"fas fa-cloud-rain\"\n        break\n      case \"clouds\":\n        classList = \"fas fa-cloud\"\n        break\n      case \"clear\":\n        classList = \"fas fa-sun\"\n        break\n      case \"snow\":\n        classList = \"fas fa-snowflake\"\n        break\n      default:\n        break\n    }\n    return classList\n  }\n\n  return (\n    <div className={classList}>\n      <DateTime datetime={props.weatherList.dt} />\n      <ul>\n        <li>\n          {props.weatherList.main.temp_max}&deg;c / \n          {props.weatherList.main.temp_min}&deg;c\n        </li>\n        <li>\n          {props.weatherList.weather[0].description}\n        </li>\n      </ul>\n      <i \n        className={getWeatherIcon(props.weatherList.weather[0].main.toLowerCase())}\n      >\n      </i>\n    </div>\n  )\n}\n\nexport default WeatherCard","import React from 'react';\n\nconst Header = (props) => {\n  if ( props.status !== '200' ) { \n    return (\n      <header>\n        <p className=\"error\">{props.error}</p>\n      </header>\n    )\n  } else {\n    return (\n      <header>\n        <h2>{props.cityName}, {props.countryName}</h2>\n      </header>\n    )\n  }\n}\n\nexport default Header","import React from 'react'\n\nconst LocationForm = (props) => {\n\n  let handleChange = function(event) {\n    props.handleChange(event)\n  }\n\n  let handleClick = function(event) {\n    event.preventDefault()\n    props.getWeatherData()\n  }\n\n  return (\n    <div>\n      <form className=\"location-form\">\n        <input \n          type=\"text\" \n          name=\"query\" \n          value={props.query} \n          placeholder=\"Enter a location...\"\n          onChange={handleChange} \n        /> \n        <button onClick={handleClick}>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default LocationForm","import React, { Component } from 'react';\nimport './css/App.css';\nimport WeatherCard from './components/WeatherCard'\nimport Header from './components/Header'\nimport LocationForm from './components/LocationForm'\n\nconst config = {\n  API: \"https://api.openweathermap.org/data/2.5/forecast\",\n  API_KEY: process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY\n}\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      error: \"\",\n      status: \"\",\n      query: \"london,gb\",\n      weatherdata: {},\n      isLoaded: false\n    }\n\n    this.getWeatherData()\n  }\n\n  getWeatherData = () => {\n    let URL = config.API + '?q=' + this.state.query + '&units=metric&APPID=' + config.API_KEY\n\n    fetch(URL)\n      .then( result => result.json() )\n      .then ( \n        (result) => {\n          if ( result.cod === '200') {\n            this.setState({ \n              status: result.cod,\n              weatherdata: result,\n              isLoaded: true\n            })\n          } else {\n            this.setState({\n              status: result.cod,\n              error: result.message,\n              isLoaded: false\n            })\n          }\n      },\n      (error) => {\n        this.setState({\n          isLoaded: false,\n          error: error\n        })\n      }\n    )\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  getWeatherCards = () => {\n    let cards = []\n    for (let i = 0; i < this.state.weatherdata.cnt; i++) {\n      cards.push(\n        <WeatherCard \n          key={i} \n          weatherList={this.state.weatherdata.list[i]} \n        />\n      )\n    }\n    return cards\n  }\n\n  getlocationForm = () => {\n    return(\n      <LocationForm\n        query={this.state.query} \n        handleChange={this.handleChange}\n        getWeatherData={this.getWeatherData}\n      />\n    )\n  }\n\n  render = () => {\n    if (this.state.status !== '200') {\n      return (\n        <div className=\"App\">\n          <Header \n            status={this.state.status}\n            error={this.state.error}\n          />\n          {this.getlocationForm()}\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n          {\n              this.state.isLoaded && (\n                <Header \n                  cityName={this.state.weatherdata.city.name} \n                  countryName={this.state.weatherdata.city.country} \n                  status={this.state.status}\n                  error={this.state.error}\n                />\n              )\n            }\n            {this.getlocationForm()}\n            {\n              this.state.isLoaded && (\n                <div className=\"weather-cards\">\n                  {this.getWeatherCards()}\n                </div>\n              )\n            }\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/font-awesome.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}