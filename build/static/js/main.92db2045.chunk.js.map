{"version":3,"sources":["components/DateTime.js","components/WeatherCard.js","components/Header.js","components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["months","days","DateTime","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getTheHours","date","hours","getHours","getTheDay","day","getDay","getTheMonth","month","getMonth","getTheYear","getFullYear","render","Date","state","dateInMilliseconds","dateString","react_default","a","createElement","datetime","Component","WeatherCard","classList","weatherList","weather","main","toLowerCase","getWeatherIcon","weatherString","timeOfDay","className","components_DateTime","dt","temp_max","temp_min","description","dateTime","getTimeofDay","getIcon","Header","status","error","cityName","countryName","SearchForm","handleClick","e","preventDefault","setQuery","target","attributes","query","value","type","id","name","queryString","placeholder","onChange","handleChange","onClick","config","API","API_KEY","process","App","getWeatherData","URL","queryType","queryID","fetch","then","result","json","cod","setState","weatherData","city","isLoaded","message","_e$target","defineProperty","getWeatherCards","cards","i","cnt","push","components_WeatherCard","key","list","queryVal","randomCityID","randomID","Math","floor","random","cityData","length","getlocationForm","components_SearchForm","components_Header","country","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92db2045.chunk.js","sourcesContent":["import React, { Component } from 'react'\nconst months = ['January','February','March','April','May','June','July','August','September','October','November','December']\nconst days = ['Sun','Mon','Tues','Wed','Thurs','Fri','Sat']\n\n/** props = datetime **/\n\nclass DateTime extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      months: months,\n      dateInMilliseconds: props.datetime * 1000\n    }\n  }\n\n  getTheHours = (date) => {\n    let hours = date.getHours()\n\n    if ( hours < 13) {\n      hours += ':00 am'\n    } else {\n      hours += ':00 pm'\n    }\n    return hours\n  }\n  \n  getTheDay = (date) => {\n    let day = date.getDay()\n    return days[day]\n  }\n  \n  getTheMonth = (date) => {\n    let month = date.getMonth()\n    return months[month]\n  }\n\n  getTheYear = (date) => {\n    return date.getFullYear()\n  }\n\n  render = () => {\n    let date = new Date(this.state.dateInMilliseconds)\n    let dateString = this.getTheDay(date) + ' ' + this.getTheMonth(date) + ' ' + date.getDay() + ', ' + this.getTheYear(date)\n\n    return (\n      <div>\n        <h3>{dateString}</h3>\n        {this.getTheHours(date)}\n      </div>\n    )\n  }\n}\n\nexport default DateTime","import React from 'react'\nimport DateTime from './DateTime'\n\n/** props = weatherList **/\n\nconst WeatherCard = (props) => {\n  let classList = 'weather-cards__card weather-cards__card--' + props.weatherList.weather[0].main.toLowerCase()\n\n  const getWeatherIcon = (weatherString, timeOfDay) => {\n    let classList\n\n    switch(weatherString) {\n      case \"rain\":\n        classList = \"fas fa-cloud-rain \" + timeOfDay\n        break\n      case \"clouds\":\n        classList = \"fas fa-cloud \" + timeOfDay\n        break\n      case \"clear\":\n        classList = \"fas fa-sun \" + timeOfDay\n        break\n      case \"snow\":\n        classList = \"fas fa-snowflake \" + timeOfDay\n        break\n      default:\n        break\n    }\n    return classList\n  }\n\n  const getTimeofDay = (dateTime) => {\n    let dateInMilliseconds = dateTime * 1000\n    let date = new Date(dateInMilliseconds)\n    let hours = date.getHours()\n\n    if (hours < 6 || hours > 21) {\n      return 'night'\n    } else {\n      return 'day'\n    }\n  }\n\n  const getIcon = (dateTime) => {\n    const timeOfDay = getTimeofDay(dateTime)\n    const weatherString = props.weatherList.weather[0].main.toLowerCase()\n\n    return (\n      <i className={getWeatherIcon(weatherString, timeOfDay)}></i>\n    )\n  }\n\n  return (\n    <div className={classList}>\n      <DateTime datetime={props.weatherList.dt} />\n      <ul>\n        <li>\n          {props.weatherList.main.temp_max}&deg;c / \n          {props.weatherList.main.temp_min}&deg;c\n        </li>\n        <li>\n          {props.weatherList.weather[0].description}\n        </li>\n      </ul>\n      {getIcon(props.weatherList.dt)}\n    </div>\n  )\n}\n\nexport default WeatherCard","import React from 'react';\n\nconst Header = (props) => {\n  if ( props.status !== '200' ) { \n    return (\n      <header>\n        <p className=\"error\">{props.error}</p>\n      </header>\n    )\n  } else {\n    return (\n      <header>\n        <h2>{props.cityName}, {props.countryName}</h2>\n      </header>\n    )\n  }\n}\n\nexport default Header","import React from 'react'\n\nconst SearchForm = (props) => {\n\n  let handleChange = function(e) {\n    props.handleChange(e)\n  }\n\n  let handleClick = function(e) {\n    e.preventDefault()\n    props.setQuery(e.target.attributes.query.value)\n  }\n\n  return (\n    <div>\n      <form className=\"search-form\">\n        <input \n          type=\"text\" \n          id=\"queryString\"\n          name=\"queryString\" \n          value={props.queryString}\n          placeholder=\"Enter a location...\"\n          onChange={handleChange} \n        /> \n        <button \n          type=\"submit\" \n          query=\"q\" \n          onClick={handleClick}\n        >\n          Submit\n        </button>\n        <button \n          type=\"submit\" \n          query=\"id\" \n          onClick={handleClick}\n        >\n          I'm feeling lucky...\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default SearchForm","import React, { Component } from 'react';\nimport './css/App.css';\nimport WeatherCard from './components/WeatherCard'\nimport Header from './components/Header'\nimport SearchForm from './components/SearchForm'\nimport cityData from './json/city.list'\n\nconst config = {\n  API: 'https://api.openweathermap.org/data/2.5/forecast',\n  API_KEY: process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY\n}\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      error: '',\n      status: '',\n      queryString: 'Prague',\n      queryID: '',\n      queryType: 'q',\n      cityData: cityData, \n      weatherData: {},\n      isLoaded: false\n    }\n  }\n\n  componentDidMount() {\n    this.getWeatherData()\n  }\n\n  getWeatherData = () => {\n    let URL\n    URL = config.API + '?' + this.state.queryType + '='\n    URL += this.state.queryType === 'q' ? this.state.queryString : this.state.queryID\n    URL += '&units=metric&APPID=' + config.API_KEY\n\n    fetch(URL)\n      .then( result => result.json() )\n      .then ( \n        (result) => {\n          if ( result.cod === '200' ) {\n            this.setState({ \n              weatherData: result,\n              queryString: result.city.name,\n              isLoaded: true,\n              status: result.cod\n            })\n          } else {\n            this.setState({\n              status: result.cod,\n              error: result.message,\n              isLoaded: false\n            })\n          }\n      },\n      (error) => {\n        this.setState({\n          isLoaded: false,\n          error: error\n        })\n      }\n    )\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  getWeatherCards = () => {\n    let cards = []\n    for (let i = 0; i < this.state.weatherData.cnt; i++) {\n      cards.push(\n        <WeatherCard \n          key={i} \n          weatherList={this.state.weatherData.list[i]} \n        />\n      )\n    }\n    return cards\n  }\n\n  setQuery = (queryVal) => {\n    let randomCityID = \"\"\n\n    if (queryVal === 'id') { \n      let randomID = Math.floor(Math.random() * this.state.cityData.length)\n      randomCityID = this.state.cityData[randomID].id\n    } \n\n    this.setState({\n        queryType: queryVal,\n        queryID: randomCityID\n      }, () => this.getWeatherData()\n    )\n  }\n\n  getlocationForm = () => {\n    return(\n      <SearchForm\n        queryString={this.state.queryString}\n        handleChange={this.handleChange}\n        setQuery={this.setQuery}\n      />\n    )\n  }\n\n  render = () => {\n    if (this.state.status !== '200') {\n      return (\n        <div className='App'>\n          <Header \n            status={this.state.status}\n            error={this.state.error}\n          />\n          {this.getlocationForm()}\n        </div>\n      )\n    } else {\n      return (\n        <div className='App'>\n          {\n            this.state.isLoaded && (\n              <Header \n                cityName={this.state.weatherData.city.name} \n                countryName={this.state.weatherData.city.country} \n                status={this.state.status}\n                error={this.state.error}\n              />\n            )\n          }\n          {this.getlocationForm()}\n          {\n            this.state.isLoaded && (\n              <div className='weather-cards'>\n                {this.getWeatherCards()}\n              </div>\n            )\n          }\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/font-awesome.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}